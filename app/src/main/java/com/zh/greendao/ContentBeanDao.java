package com.zh.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.tvproject.mvp.model.data.ContentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTENT_BEAN".
*/
public class ContentBeanDao extends AbstractDao<ContentBean, Long> {

    public static final String TABLENAME = "CONTENT_BEAN";

    /**
     * Properties of entity ContentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PublishTypeId = new Property(1, int.class, "publishTypeId", false, "PUBLISH_TYPE_ID");
        public final static Property PublishTagId = new Property(2, int.class, "publishTagId", false, "PUBLISH_TAG_ID");
        public final static Property Publisher = new Property(3, String.class, "publisher", false, "PUBLISHER");
        public final static Property Duration = new Property(4, int.class, "duration", false, "DURATION");
        public final static Property Headline = new Property(5, String.class, "headline", false, "HEADLINE");
        public final static Property Starttime = new Property(6, long.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(7, long.class, "endtime", false, "ENDTIME");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property ResourcesUrl = new Property(9, String.class, "resourcesUrl", false, "RESOURCES_URL");
        public final static Property Imgormo = new Property(10, int.class, "imgormo", false, "IMGORMO");
        public final static Property Transformsound = new Property(11, int.class, "transformsound", false, "TRANSFORMSOUND");
        public final static Property UpdateBy = new Property(12, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property CreatBy = new Property(13, String.class, "creatBy", false, "CREAT_BY");
        public final static Property CreatTime = new Property(14, long.class, "creatTime", false, "CREAT_TIME");
        public final static Property UpdateTime = new Property(15, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property PlayTime = new Property(16, String.class, "playTime", false, "PLAY_TIME");
        public final static Property PlayCount = new Property(17, int.class, "playCount", false, "PLAY_COUNT");
        public final static Property Belongto = new Property(18, int.class, "belongto", false, "BELONGTO");
        public final static Property BelongtoId = new Property(19, int.class, "belongtoId", false, "BELONGTO_ID");
        public final static Property Status = new Property(20, int.class, "status", false, "STATUS");
        public final static Property Sort = new Property(21, long.class, "sort", false, "SORT");
        public final static Property Audiencebelongto = new Property(22, int.class, "audiencebelongto", false, "AUDIENCEBELONGTO");
        public final static Property AudiencebelongtoId = new Property(23, int.class, "audiencebelongtoId", false, "AUDIENCEBELONGTO_ID");
        public final static Property Delstatus = new Property(24, int.class, "delstatus", false, "DELSTATUS");
        public final static Property TagName = new Property(25, String.class, "tagName", false, "TAG_NAME");
        public final static Property Spots = new Property(26, int.class, "spots", false, "SPOTS");
        public final static Property Bgm = new Property(27, String.class, "bgm", false, "BGM");
    }


    public ContentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ContentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"PUBLISH_TYPE_ID\" INTEGER NOT NULL ," + // 1: publishTypeId
                "\"PUBLISH_TAG_ID\" INTEGER NOT NULL ," + // 2: publishTagId
                "\"PUBLISHER\" TEXT," + // 3: publisher
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"HEADLINE\" TEXT," + // 5: headline
                "\"STARTTIME\" INTEGER NOT NULL ," + // 6: starttime
                "\"ENDTIME\" INTEGER NOT NULL ," + // 7: endtime
                "\"CONTENT\" TEXT," + // 8: content
                "\"RESOURCES_URL\" TEXT," + // 9: resourcesUrl
                "\"IMGORMO\" INTEGER NOT NULL ," + // 10: imgormo
                "\"TRANSFORMSOUND\" INTEGER NOT NULL ," + // 11: transformsound
                "\"UPDATE_BY\" TEXT," + // 12: updateBy
                "\"CREAT_BY\" TEXT," + // 13: creatBy
                "\"CREAT_TIME\" INTEGER NOT NULL ," + // 14: creatTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 15: updateTime
                "\"PLAY_TIME\" TEXT," + // 16: playTime
                "\"PLAY_COUNT\" INTEGER NOT NULL ," + // 17: playCount
                "\"BELONGTO\" INTEGER NOT NULL ," + // 18: belongto
                "\"BELONGTO_ID\" INTEGER NOT NULL ," + // 19: belongtoId
                "\"STATUS\" INTEGER NOT NULL ," + // 20: status
                "\"SORT\" INTEGER NOT NULL ," + // 21: sort
                "\"AUDIENCEBELONGTO\" INTEGER NOT NULL ," + // 22: audiencebelongto
                "\"AUDIENCEBELONGTO_ID\" INTEGER NOT NULL ," + // 23: audiencebelongtoId
                "\"DELSTATUS\" INTEGER NOT NULL ," + // 24: delstatus
                "\"TAG_NAME\" TEXT," + // 25: tagName
                "\"SPOTS\" INTEGER NOT NULL ," + // 26: spots
                "\"BGM\" TEXT);"); // 27: bgm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPublishTypeId());
        stmt.bindLong(3, entity.getPublishTagId());
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(4, publisher);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String headline = entity.getHeadline();
        if (headline != null) {
            stmt.bindString(6, headline);
        }
        stmt.bindLong(7, entity.getStarttime());
        stmt.bindLong(8, entity.getEndtime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String resourcesUrl = entity.getResourcesUrl();
        if (resourcesUrl != null) {
            stmt.bindString(10, resourcesUrl);
        }
        stmt.bindLong(11, entity.getImgormo());
        stmt.bindLong(12, entity.getTransformsound());
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(13, updateBy);
        }
 
        String creatBy = entity.getCreatBy();
        if (creatBy != null) {
            stmt.bindString(14, creatBy);
        }
        stmt.bindLong(15, entity.getCreatTime());
        stmt.bindLong(16, entity.getUpdateTime());
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(17, playTime);
        }
        stmt.bindLong(18, entity.getPlayCount());
        stmt.bindLong(19, entity.getBelongto());
        stmt.bindLong(20, entity.getBelongtoId());
        stmt.bindLong(21, entity.getStatus());
        stmt.bindLong(22, entity.getSort());
        stmt.bindLong(23, entity.getAudiencebelongto());
        stmt.bindLong(24, entity.getAudiencebelongtoId());
        stmt.bindLong(25, entity.getDelstatus());
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(26, tagName);
        }
        stmt.bindLong(27, entity.getSpots());
 
        String bgm = entity.getBgm();
        if (bgm != null) {
            stmt.bindString(28, bgm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPublishTypeId());
        stmt.bindLong(3, entity.getPublishTagId());
 
        String publisher = entity.getPublisher();
        if (publisher != null) {
            stmt.bindString(4, publisher);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String headline = entity.getHeadline();
        if (headline != null) {
            stmt.bindString(6, headline);
        }
        stmt.bindLong(7, entity.getStarttime());
        stmt.bindLong(8, entity.getEndtime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String resourcesUrl = entity.getResourcesUrl();
        if (resourcesUrl != null) {
            stmt.bindString(10, resourcesUrl);
        }
        stmt.bindLong(11, entity.getImgormo());
        stmt.bindLong(12, entity.getTransformsound());
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(13, updateBy);
        }
 
        String creatBy = entity.getCreatBy();
        if (creatBy != null) {
            stmt.bindString(14, creatBy);
        }
        stmt.bindLong(15, entity.getCreatTime());
        stmt.bindLong(16, entity.getUpdateTime());
 
        String playTime = entity.getPlayTime();
        if (playTime != null) {
            stmt.bindString(17, playTime);
        }
        stmt.bindLong(18, entity.getPlayCount());
        stmt.bindLong(19, entity.getBelongto());
        stmt.bindLong(20, entity.getBelongtoId());
        stmt.bindLong(21, entity.getStatus());
        stmt.bindLong(22, entity.getSort());
        stmt.bindLong(23, entity.getAudiencebelongto());
        stmt.bindLong(24, entity.getAudiencebelongtoId());
        stmt.bindLong(25, entity.getDelstatus());
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(26, tagName);
        }
        stmt.bindLong(27, entity.getSpots());
 
        String bgm = entity.getBgm();
        if (bgm != null) {
            stmt.bindString(28, bgm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ContentBean readEntity(Cursor cursor, int offset) {
        ContentBean entity = new ContentBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // publishTypeId
            cursor.getInt(offset + 2), // publishTagId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publisher
            cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headline
            cursor.getLong(offset + 6), // starttime
            cursor.getLong(offset + 7), // endtime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // resourcesUrl
            cursor.getInt(offset + 10), // imgormo
            cursor.getInt(offset + 11), // transformsound
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updateBy
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // creatBy
            cursor.getLong(offset + 14), // creatTime
            cursor.getLong(offset + 15), // updateTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // playTime
            cursor.getInt(offset + 17), // playCount
            cursor.getInt(offset + 18), // belongto
            cursor.getInt(offset + 19), // belongtoId
            cursor.getInt(offset + 20), // status
            cursor.getLong(offset + 21), // sort
            cursor.getInt(offset + 22), // audiencebelongto
            cursor.getInt(offset + 23), // audiencebelongtoId
            cursor.getInt(offset + 24), // delstatus
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tagName
            cursor.getInt(offset + 26), // spots
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // bgm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContentBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPublishTypeId(cursor.getInt(offset + 1));
        entity.setPublishTagId(cursor.getInt(offset + 2));
        entity.setPublisher(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.getInt(offset + 4));
        entity.setHeadline(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStarttime(cursor.getLong(offset + 6));
        entity.setEndtime(cursor.getLong(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setResourcesUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgormo(cursor.getInt(offset + 10));
        entity.setTransformsound(cursor.getInt(offset + 11));
        entity.setUpdateBy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreatBy(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreatTime(cursor.getLong(offset + 14));
        entity.setUpdateTime(cursor.getLong(offset + 15));
        entity.setPlayTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPlayCount(cursor.getInt(offset + 17));
        entity.setBelongto(cursor.getInt(offset + 18));
        entity.setBelongtoId(cursor.getInt(offset + 19));
        entity.setStatus(cursor.getInt(offset + 20));
        entity.setSort(cursor.getLong(offset + 21));
        entity.setAudiencebelongto(cursor.getInt(offset + 22));
        entity.setAudiencebelongtoId(cursor.getInt(offset + 23));
        entity.setDelstatus(cursor.getInt(offset + 24));
        entity.setTagName(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSpots(cursor.getInt(offset + 26));
        entity.setBgm(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContentBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
